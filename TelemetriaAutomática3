Célula 1:
!pip install ftfy
!pip install opencage
#importação das bibliotecas necessárias
import pandas as pd
import numpy as np
from sklearn.cluster import DBSCAN
from geopy.exc import GeocoderTimedOut, GeocoderServiceError
from opencage.geocoder import OpenCageGeocode
from google.colab import files
import time
# Fazer o upload do arquivo do excel
from google.colab import files
uploaded = files.upload()

Célula 2:
# Identificar o nome do arquivo carregado
file_name = list(uploaded.keys())[0]

# Carregar a planilha Excel
df = pd.read_excel(file_name)

# Exibir as primeiras linhas para verificar a estrutura
df.tail()

Célula 3:
# Definir um dicionário de substituição para corrigir caracteres bugados
correcao_caracteres = {
    "Ã¡": "á", "Ã£": "ã", "Ã¢": "â", "Ãª": "ê", "Ã©": "é", "Ã¨": "è",
    "Ã­": "í", "Ã³": "ó", "Ãµ": "õ", "Ã´": "ô", "Ãº": "ú", "Ã§": "ç",
    "Ã€": "À", "Ã�": "Á", "Ã‚": "Â", "Ãƒ": "Ã", "Ã„": "Ä", "Ã…": "Å",
    "Ã‡": "Ç", "Ãˆ": "È", "Ã‰": "É", "ÃŠ": "Ê", "Ã‹": "Ë", "ÃŒ": "Ì",
    "Ã�": "Í", "ÃŽ": "Î", "Ã‘": "Ñ", "Ã’": "Ò", "Ã“": "Ó", "Ã”": "Ô",
    "Ã•": "Õ", "Ã–": "Ö", "Ã—": "×", "Ã˜": "Ø", "Ã™": "Ù", "Ãš": "Ú",
    "Ã›": "Û", "Ãœ": "Ü", "Ã�": "Ý", "ÃŸ": "ß", "Ã¡": "á", "Ã¢": "â",
    "Ã£": "ã", "Ã¤": "ä", "Ã¥": "å", "Ã¦": "æ", "Ã§": "ç", "Ã¨": "è",
    "Ã©": "é", "Ãª": "ê", "Ã«": "ë", "Ã¬": "ì", "Ã­": "í", "Ã®": "î",
    "Ã¯": "ï", "Ã°": "ð", "Ã±": "ñ", "Ã²": "ò", "Ã³": "ó", "Ã´": "ô",
    "Ãµ": "õ", "Ã¶": "ö", "Ã·": "÷", "Ã¸": "ø", "Ã¹": "ù", "Ãº": "ú",
    "Ã»": "û", "Ã¼": "ü", "Ã½": "ý", "Ã¾": "þ", "Ã¿": "ÿ"
}

def corrigir_texto(texto):
    """Corrige caracteres bugados substituindo por letras corretas."""
    if isinstance(texto, str):
        for bugado, correto in correcao_caracteres.items():
            texto = texto.replace(bugado, correto)
    return texto

# Aplicar a correção em todas as colunas do DataFrame
df = df.map(lambda x: corrigir_texto(x) if isinstance(x, str) else x)

# Aplicar a correção nos nomes das colunas
df.columns = [corrigir_texto(col) for col in df.columns]

# Exibir as primeiras linhas para verificar se os caracteres foram corrigidos corretamente
df.tail()

Célula 4:
# Criar um dicionário para armazenar os dataframes de cada placa
df_por_placa = {}

# Identificar a coluna que contém as placas dos veículos
coluna_placa = "Placa"

# Criar um dataframe para cada placa
for placa in df[coluna_placa].unique():
    df_por_placa[placa] = df[df[coluna_placa] == placa].copy()

# Exibir as placas identificadas
df_por_placa.keys()

Célula 5:
coluna_data_hora = "Data"
coluna_evento = "Evento"
coluna_velocidade = "Velocidade"

# Converter a coluna de data para datetime
df[coluna_data_hora] = pd.to_datetime(df[coluna_data_hora], errors="coerce")

horarios_por_placa = {}

for placa, df_veiculo in df_por_placa.items():
    df_veiculo = df_veiculo.sort_values(by=coluna_data_hora)

    # Encontrar o primeiro "Contato ON" do dia
    contato_on = df_veiculo[df_veiculo[coluna_evento] == "Contato ON"]
    if not contato_on.empty:
        primeiro_contato_on = contato_on[coluna_data_hora].min()

        # Filtrar os eventos após o primeiro "Contato ON"
        df_após_contato = df_veiculo[df_veiculo[coluna_data_hora] > primeiro_contato_on]

        # Criar uma coluna para a velocidade anterior
        df_após_contato["velocidade_anterior"] = df_após_contato[coluna_velocidade].shift(1)

        # Identificar a primeira mudança de velocidade de 0 para 5 ou mais
        df_saida_casa = df_após_contato[
            (df_após_contato["velocidade_anterior"] == 0) & (df_após_contato[coluna_velocidade] >= 5)
        ]

        if not df_saida_casa.empty:
            saida_casa = df_saida_casa[coluna_data_hora].min()
        else:
            saida_casa = primeiro_contato_on  # Se não houver mudança de velocidade, mantém o "Contato ON"


    chegada_casa = df_veiculo[df_veiculo[coluna_evento] == "Contato OFF"][coluna_data_hora].max()

    horarios_por_placa[placa] = {"Saída de Casa": saida_casa, "Chegada em Casa": chegada_casa}

horarios_por_placa


Célula 6:
# Criando um dicionário para armazenar os clusters das minas
clusters_minas = {}
api_key = "063e8fbab2374eab884c24a786864f89"
geolocator = OpenCageGeocode(api_key)          # Inicialização do cliente


def reverse_geocode(latitude, longitude):
    results = geolocator.reverse_geocode(latitude, longitude)
    if results and len(results) > 0:
        return results[0]['formatted']
    else:
        return "Localização desconhecida"

# Processamento por veículo para identificar minas
for placa, df_veiculo in df_por_placa.items():
    df_viagem = df_veiculo[~df_veiculo[coluna_evento].isin(["Contato ON", "Contato OFF"])]

    coords = df_viagem[['Latitude', 'Longitude']].dropna().values
    if len(coords) == 0:
        continue

    # Clusterização DBSCAN sem um raio fixo
    db = DBSCAN(eps=0.02, min_samples=3, metric='haversine').fit(np.radians(coords))  # eps 0.02 ≈ 2 km

    # Identificar clusters únicos, ignorando ruído (-1)
    unique_labels, counts = np.unique(db.labels_[db.labels_ != -1], return_counts=True)
    if len(unique_labels) == 0:
        continue

    for cluster_id in unique_labels:
        cluster_coords = coords[db.labels_ == cluster_id]

        # Definir KM_MAX_DISTANCE específico para cada cluster (pode ser ajustado manualmente)
        km_max_distance = max(0.5, np.std(cluster_coords[:, 0]) * 111)  # 111 km ≈ 1° lat/lon

        # Definir o centro do cluster
        centroide = cluster_coords.mean(axis=0)

        # Geocodificação do cluster
        nome_mina = reverse_geocode(centroide[0], centroide[1])

        # Salvar no dicionário de clusters
        clusters_minas[nome_mina] = {
            'centroide': centroide,
            'km_max_distance': km_max_distance
        }

# Exibir clusters identificados
clusters_minas



Célula 7:
for placa, df_veiculo in df_por_placa.items():
    df_viagem = df_veiculo[~df_veiculo[coluna_evento].isin(["Contato ON", "Contato OFF"])]

    coords = df_viagem[['Latitude', 'Longitude']].dropna().values
    if len(coords) == 0:
        continue

    df_veiculo["mina_identificada"] = "Desconhecido"

    for nome_mina, cluster_info in clusters_minas.items():
        centroide = cluster_info['centroide']
        km_max_distance = cluster_info['km_max_distance']

        # Identificar se o ponto pertence à mina
        df_veiculo.loc[
            np.sqrt((df_veiculo['Latitude'] - centroide[0])**2 +
                    (df_veiculo['Longitude'] - centroide[1])**2) <= (km_max_distance / 111),
            "mina_identificada"
        ] = nome_mina

    # Filtrar apenas registros onde a mina foi identificada
    df_veiculo = df_veiculo[df_veiculo["mina_identificada"] != "Desconhecido"]

    # Ordenar por tempo
    df_sorted = df_veiculo.sort_values(coluna_data_hora)

    # Identificar transições
    df_sorted['entrou_na_mina'] = (df_sorted["mina_identificada"] != df_sorted["mina_identificada"].shift(1))
    df_sorted['saiu_da_mina'] = (df_sorted["mina_identificada"] != df_sorted["mina_identificada"].shift(-1))

    # Atualizar horários
    saida_casa = horarios_por_placa[placa]['Saída de Casa']
    chegada_casa = horarios_por_placa[placa]['Chegada em Casa']

    horarios_por_placa[placa].update({
        'Mina Identificada': df_sorted["mina_identificada"].mode()[0] if not df_sorted.empty else "Desconhecido",
        'Chegada na Mina': df_sorted[df_sorted['entrou_na_mina'] & (df_sorted[coluna_data_hora] > saida_casa)][coluna_data_hora].min(),
        'Saída da Mina': df_sorted[df_sorted['saiu_da_mina'] & (df_sorted[coluna_data_hora] < chegada_casa)][coluna_data_hora].max()
    })

# Exibir resultados
horarios_por_placa


Célula 8:
# Converter dicionário para DataFrame
df_resultados = pd.DataFrame.from_dict(horarios_por_placa, orient="index")

# Exibir as primeiras linhas para verificação
df_resultados.head(30)
